// LSD: Layout Space Debugger
// Set to true for visual indicators of which elements are where,
// along with their paddings and borders.
$LSD: false;

* {
  margin: 0;

  @if $LSD {
    outline: solid 1px red;
  }
}

html, body {
  height: 100%;
  max-width: 100vw;
  background-color: rgb(218, 236, 236);
}

#game {
  display: grid;
  grid-template-columns: 1fr minmax(90vmin, 1.5fr);
  /* In CSS Grid, the set of columns and rows are called tracks;
  For the 2 columns we want a dynamic approach: we want both 'settings'
  and 'gameboard' to grow (and shrink), but we want the 'gameboard' section
  to be at most 1.5 times wider than the 'settings' section, and at least
  90% of the length of the smallest viewport side (i.e. height when in
  landscape, width when in portrait). This is exactly what the minmax()
  function does; it provides a range through which the column width
  can float freely, taking into account the given constraints.
  NOTE:
  In this case, our constraints aren't set in stone:
  at certain sizes our minimum could become larger than our maximum;
  in this case the maximum will simply be ignored until the minimum
  is actually the smallest again!
  fr, the grid-specific fraction unit, allows us to elegantly express
  proportions in relation to each other. */
  grid-template-rows: minmax(10vh, auto) 90vh;
  /* 'grid-template-rows' takes a sequence of sizes that define the individual rows.
  In this case, we give the first row a minimum height of 10% of the viewport height,
  but allow it to grow bigger if it is required to make the content fit.
  The second row gets a height of 90% of the viewport height. */
  grid-template-areas: 'status   status'
                       'settings gameboard';
  /* 'grid-template-areas' takes a string of space-separated names, allowing us to give
  each cell a name. If two adjacent cells have the same name, they are going to be
  coalesced into the same area. To finish up, we need to register our chosen names
  as 'grid-area's in their respective html elements (see below). */
  
}

#status {
  grid-area: status;
  background-color: rgb(255, 214, 127);
  text-align: center;

}

#settings {
  grid-area: settings;
}

#gameboard {
  grid-area: gameboard;
  display: flex;
  justify-content: center;
  padding: 1rem;
  min-height: 200px;

}


.yellow {
  stroke: rgb(235, 173, 2);
  stroke-width: 1;
}

.orange {
  stroke: rgb(226, 85, 3);
  stroke-width: 2;
}

.red {
  stroke: rgb(199, 5, 12);
  stroke-width: 3;
}

.green {
  stroke: rgb(31, 134, 5);
  stroke-width: 2;
}

.cyan {
  stroke: rgb(6, 90, 199);
  stroke-width: 1;
}

.blue {
  stroke: blue;
  stroke-width: 1;
}

.purple {
  stroke: rgb(155, 3, 226);
  stroke-width: 2;
}

.winner {
  height: 2rem;
  width: 50rem;
  position: absolute;
  top: 1.5%;
  left: 50%;
  margin: 1rem;
  margin-right: -50%;
  transform: translate(-50%, -50%);
  text-align: center;
  padding-top: 0.75rem;
}

.winner.red {
  background-color: red;
  border: 0.2rem solid rgb(126, 4, 4);
}

.winner.yellow {
  background-color: yellow;
  border: 0.2rem solid rgb(133, 133, 2);
}

.status {
  margin-top: 1rem;
}

.status.red {
  color: red;
}

.status.yellow {
  color: rgb(192, 192, 2);
}

@media (orientation: portrait) {
  #game {
    grid-template-columns: 1fr;
    grid-template-rows: 10vh auto 90vmin;
    /* The third row containing the gameboard will be a square
    the size of the viewport width (only in portrait modes) */
    grid-template-areas: 'status'
                         'settings'
                         'gameboard';
  }
}

// LSD: Layout Space Debugger
// Code for tagging most important elements
.svg-tags {
  display: none;
}
@if $LSD {
  .svg-tags {
    display: block;
  }
  #gameboard,
  #game,
  #status,
  #settings {
    position: relative;
  }
  // :after does not work on svgs!
  // This means we can't use #svg-container:after
  // or #svg-grid:after => svg-tags work-around.
  #gameboard:after,
  #game:after,
  #settings:after {
    position: absolute;
    left: 0;
    top: 0;
    color: white;
    background-color: red;
    padding: 0.2rem;
    font-size: 0.9rem;
  }
  #gameboard:after {
    content: '#gameboard-div';
  }
  #game:after {
    content: '#game';
  }
  #settings:after {
    content: '#settings';
  }
  #status:after {
    content: '#status';
    position: absolute;
    right: 0; // coincides with #game tag when on the left
    top: 0;
    color: white;
    background-color: red;
    padding: 0.2rem;
    font-size: 0.9rem;
  }
}