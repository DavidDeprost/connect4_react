* {
  /* Debug-helper; see outlines of all elements, without changing layout */
  outline: solid 1px red;
  margin: 0;
  padding: 0;
}

body {
  background-color: rgb(218, 236, 236);
  font: 1rem 'Century Gothic', Futura, sans-serif;
}

#game {
  display: grid;
  grid-template-rows: 10vh 90vh;
  /* In CSS Grid, the set of columns and rows are called tracks;
  'grid-template-rows' takes a sequence of sizes that define the individual rows.
  In this case, we give the first row a height of 10% of the viewport height,
  and the last one a height of 90% of the viewport height. */
  grid-template-columns: 1fr minmax(90vmin, 1.5fr);
  /* For the 2 columns we want to take a more dynamic approach: we want both 'settings'
  and 'gameboard' to grow (and shrink), but we want the 'gameboard' section to be 1.5 times
  larger than the 'settings' section. fr, the fraction unit, is a grid-specific unit
  that allows us to elegantly express proportions in relation to each other. */
  grid-template-areas: 'win-status turn-status'
                       'settings   gameboard';
  /* 'grid-template-areas' takes a string of space-separated names, allowing us to give
  each cell a name. If two adjacent cells have the same name, they are going to be
  coalesced into the same area. To finish up, we need to register our chosen names
  as 'grid-area's in their respective html elements (see below). */

}

#win-status {
  grid-area: win-status;
  background-color: rgb(153, 255, 127);
  
}

#turn-status {
  grid-area: turn-status;
  background-color: rgb(255, 214, 127);
  text-align: center;
  min-height: 2rem;

}

#settings {
  grid-area: settings;
}

#gameboard {
  grid-area: gameboard;
  display: flex;
  justify-content: center;
  margin-top: 1.5rem;
  margin-bottom: 0.5rem;
  min-height: 200px;

}

/* @media screen and (max-width: 750px) {
  #container {
    width: 90%;
  }
}
@media screen and (max-width: 1080px) and (max-aspect-ratio: 10/16) {
  #container {
    width: 90%;
  }
}
@media screen and (min-width: 1500px) and (min-aspect-ratio: 16/10) {
  #container {
    width: 40%;
  }
} */

.yellow {
  stroke: rgb(235, 173, 2);
  stroke-width: 1;
}

.orange {
  stroke: rgb(226, 85, 3);
  stroke-width: 2;
}

.red {
  stroke: rgb(199, 5, 12);
  stroke-width: 3;
}

.green {
  stroke: rgb(31, 134, 5);
  stroke-width: 2;
}

.cyan {
  stroke: rgb(6, 90, 199);
  stroke-width: 1;
}

.blue {
  stroke: blue;
  stroke-width: 1;
}

.purple {
  stroke: rgb(155, 3, 226);
  stroke-width: 2;
}

.winner {
  height: 2rem;
  width: 50rem;
  position: absolute;
  top: 1.5%;
  left: 50%;
  margin: 1rem;
  margin-right: -50%;
  transform: translate(-50%, -50%);
  text-align: center;
  padding-top: 0.75rem;
}

.winner.red {
  background-color: red;
  border: 0.2rem solid rgb(126, 4, 4);
}

.winner.yellow {
  background-color: yellow;
  border: 0.2rem solid rgb(133, 133, 2);
}

.status {
  margin-top: 1rem;
}

.status.red {
  color: red;
}

.status.yellow {
  color: rgb(192, 192, 2);
}
