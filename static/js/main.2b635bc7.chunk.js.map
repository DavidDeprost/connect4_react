{"version":3,"sources":["app/_variables.scss","app/settings/settings.scss","app/app.scss","app/status/status.scss","serviceWorker.js","app/status/timer-display.js","app/status/status.js","app/settings/gridsize-setting.js","app/settings/checkercolor-setting.js","app/settings/timer-setting.js","app/settings/settings.js","app/game/checker.js","app/game/column.js","app/game/game.js","app/app.js","index.js"],"names":["module","exports","mediaQueryWidth","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TimerDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tick","currentCount","setState","p1Turn","p1Next","changeTurn","timer","interval","setInterval","clearInterval","remainingSeconds","react_default","a","createElement","React","Component","Status","gameOverMessage","statusMessage","statusClass","color","gameOver","winner","p1Color","p2Color","className","id","timer_display","Gridsize","name","value","rows","onChange","resetGrid","CheckerColor","player","setCheckerColor","TimerInput","type","step","min","max","setTimer","Settings","sidebarClass","bgClass","contentClass","landscapePassive","portraitActive","onClick","onSideClick","gridsize_setting","checkercolor_setting","timer_setting","Checker","node","tween","cy","rowID","toString","duration","TweenMax","to","x","y","ease","_this2","winningChecker","r","cx","fill","ref","circle","Column","mouseEnter","isHovered","mouseLeave","handleClick","fullColumn","updateGridState","onColumnClick","colID","hoverChecker","Fragment","onMouseEnter","onMouseLeave","app_game_checker","colData","map","checker","i","slice","key","Math","abs","width","height","mask","Game","cols","pillarCorrection","viewbox","bottomPaddingWidth","bottomPaddingY","pillarHeight","rightPillarX","gridFocus","viewBox","xmlns","fx","fy","offset","stopColor","stopOpacity","x1","y1","x2","y2","patternUnits","floodColor","in","toConsumableArray","Array","el","app_game_column","grid","fullColumns","rx","ry","filter","fontSize","App","bottomCell","findBottomCell","checkForWinner","includes","handleTouchStart","event","clientX","touches","clientY","handleTouchMove","screen","xDelta","yDelta","matchMedia","matches","innerWidth","vars","toggleLandscape","togglePortrait","handleSideClick","parseInt","target","initGrid","c","push","column","length","objectSpread","col","checkLine","winColor","b","d","onTouchStart","onTouchMove","settings_settings","app_status_status","game_game","ReactDOM","render","app_app","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b635bc7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mediaQueryWidth\":\"1200\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mediaQueryWidth\":\"1200\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mediaQueryWidth\":\"1200\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mediaQueryWidth\":\"1200\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nclass TimerDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentCount: this.props.timer,\n      p1Turn: this.props.p1Next,\n    };\n  }\n\n  componentDidMount() {\n    /* STATE vs INSTANCE variables in React:\n    Whenever state is updated, React calls render\n    and makes any necessary changes to the real DOM.\n    Because the value of 'this.interval' has no direct\n    effect on the rendering of this component,\n    it shouldn't live in state. Putting it there would\n    cause unnecessary calls to render. So it is perfectly\n    fine to have local component variables that don't\n    live in state! */\n    this.interval = setInterval(this.tick, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  tick = () => {\n    let currentCount = this.state.currentCount;\n    currentCount--;\n    this.setState({currentCount});\n\n    // Turn is over because time is up:\n    if (this.state.p1Turn === this.props.p1Next && currentCount < 1) {\n      this.props.changeTurn();\n      this.setState({currentCount: this.props.timer});\n    }\n    // Turn is over because a player dropped a checker:\n    if (this.state.p1Turn !== this.props.p1Next) {\n      this.setState({\n        currentCount: this.props.timer,\n        p1Turn: this.props.p1Next,\n      });\n    }\n  }\n\n  render() {\n    let seconds = this.state.currentCount;\n    let remainingSeconds = seconds + 's';\n\n    // Turn is almost over because time is almost up => write message:\n    // if (seconds < 2) {\n    //   remainingSeconds = '1s: Quickly now!';\n    // }\n    // -> Currently disabled, because buggy on mobile (too much text for small screens)\n\n    // Turn is over because a player dropped a checker:\n    if (this.state.p1Turn !== this.props.p1Next) {\n      // Prevent displaying the seconds of the previous turn for the\n      // fraction of a second untill tick() resets the timer:\n      remainingSeconds = '';\n    }\n\n    return (\n      <span>\n        {remainingSeconds}\n      </span>\n    );\n  }\n}\n\n\nexport default TimerDisplay;","import React from 'react';\nimport './status.scss';\nimport TimerDisplay from './timer-display';\n\n\nfunction Status(props) {\n  let gameOverMessage;\n  let statusMessage;\n  let statusClass;\n  let color;\n\n  if (props.gameOver) {\n    if (props.winner) {\n      color = props.winner; // winning color\n      gameOverMessage = 'Winner: ' + props.winner + '!!!';\n      statusMessage = '';\n      \n      statusClass = color + ' status';\n    } else {\n      gameOverMessage = 'Game over!';\n      statusClass = 'draw status';\n    }\n  } else {\n    color = (props.p1Next ? props.p1Color : props.p2Color);\n    gameOverMessage = '';\n    statusMessage = color + \"'s turn\";\n    \n    statusClass = 'status'\n  }\n\n  return (\n    <div className={statusClass}>\n\n        {/* '#timerDisplay' displays invisually after win, which pushes the win message to the right: */}\n        <span id='timerDisplay' className={color}>\n          {\n            (props.timer && !props.gameOver) ? // Conditionally render TimerDisplay when a timer is set:\n                <TimerDisplay\n                  p1Next={props.p1Next}\n                  changeTurn={props.changeTurn}\n                  timer={props.timer}\n                /> : null\n          }\n        </span>\n\n        <span id='gameOverMessage'>\n          {gameOverMessage}\n        </span>\n\n        <span id='statusMessage' className={color}>\n          {statusMessage}\n        </span>\n    </div>\n  );\n\n}\n\n\nexport default Status;","import React from 'react';\nimport './settings.scss';\n\n\nfunction Gridsize(props) {\n\n  return (\n    <form>\n      <label className='fontColor'>Gridsize: &nbsp;\n        <select name='gridsize' value={props.rows} onChange={props.resetGrid} >\n          {/* value = number of rows in the grid; this is used to determine the gridsize\n              by passing it to the resetGrid event handler. */}\n          <option value='4'>extra small</option>\n          <option value='5'>small</option>\n          <option value='6'>medium</option>\n          <option value='7'>large</option>\n          <option value='8'>extra large</option>\n          <option value='9'>huge</option>\n          <option value='10'>massive</option>\n        </select>\n      </label>\n    </form>\n  );\n}\n\n\nexport default Gridsize;","import React from 'react';\nimport './settings.scss';\n\n\nfunction CheckerColor(props) {\n\n  return (\n    <form>\n      <label className='fontColor'>{props.player} &nbsp;\n        <select name='checkercolor' value={props.color} onChange={props.setCheckerColor(props.player)} >\n          <option value='yellow'>yellow</option>\n          <option value='orange'>orange</option>\n          <option value='red'>red</option>\n          <option value='green'>green</option>\n          <option value='cyan'>cyan</option>\n          <option value='blue'>blue</option>\n          <option value='purple'>purple</option>\n        </select>\n      </label>\n    </form>\n  );\n}\n\n\nexport default CheckerColor;","import React from 'react';\n\n\nfunction TimerInput(props) {\n  return (\n    <form>\n      <label className='fontColor'>Turn timeout: &nbsp;\n        <input\n            type='number'\n            step='1'\n            min='0'\n            max='60'\n            name='timerInput'\n            value={props.timer}\n            onChange={props.setTimer}\n        />\n        {/* <select name='timerInput' value={props.timer} onChange={props.setTimer} >\n          <option value='0'>none</option>\n          <option value='1'>1</option>\n          <option value='2'>2</option>\n          <option value='3'>3</option>\n          <option value='4'>4</option>\n          <option value='5'>5</option>\n          <option value='6'>6</option>\n          <option value='7'>7</option>\n          <option value='8'>8</option>\n          <option value='9'>9</option>\n          <option value='10'>10</option>\n          <option value='11'>11</option>\n          <option value='12'>12</option>\n          <option value='13'>13</option>\n          <option value='14'>14</option>\n          <option value='15'>15</option>\n          <option value='16'>16</option>\n          <option value='17'>17</option>\n          <option value='18'>18</option>\n          <option value='19'>19</option>\n          <option value='20'>20</option>\n        </select> */}\n      </label>\n    </form>\n  );\n}\n\n\nexport default TimerInput;","import React from 'react';\nimport './settings.scss';\n\nimport GridSize from './gridsize-setting';\nimport CheckerColor from './checkercolor-setting';\nimport TimerInput from './timer-setting';\n\n\nfunction Settings(props) {\n  let sidebarClass = 'sidebar';\n  let bgClass = 'sidebar-background';\n  let contentClass = 'sidebar-content';\n\n  if (props.landscapePassive) {\n    sidebarClass += ' landscapePassive';\n    contentClass += ' landscapePassive';\n  }\n\n  if (props.portraitActive) {\n    sidebarClass += ' portraitActive';\n    bgClass += ' portraitActive';\n    contentClass += ' portraitActive';\n  }\n\n  return (\n    <div className={sidebarClass} onClick={props.onSideClick}>\n        <button className=\"sidebar-trigger\" onClick={props.onClick}>\n          &#9881;\n        </button>\n\n        {/* A mock background layer to hide the sidebar by clicking on it: */}\n        <div className={bgClass} onClick={props.onClick} />\n\n        {/* The content of the sidebar: */}\n        <div className={contentClass} >\n            <div className='sidebar-name'>Settings</div>\n            <hr className='line' />\n            <div className='padding'>\n              <GridSize\n                rows={props.rows}\n                resetGrid={props.resetGrid}\n              />\n              <CheckerColor\n                player='Player 1:'\n                color={props.p1Color}\n                setCheckerColor={props.setCheckerColor}\n              />\n              <CheckerColor\n                player='Player 2:'\n                color={props.p2Color}\n                setCheckerColor={props.setCheckerColor}\n              />\n              <TimerInput\n                timer={props.timer}\n                setTimer={props.setTimer}\n              />\n            </div>\n        </div>\n    </div>\n  );\n}\n\n\nexport default Settings;","import React from 'react';\nimport TweenMax from 'gsap/TweenMax';\nimport './checker.scss';\n\n\nclass Checker extends React.Component {\n  // PROPS: - color\n  //        - rowID: the row of the checker; with '0' being the invisible top row,\n  //                 '1' = the top row, '2' the second from the top, etc.\n  //        (- key: Each child in an array or iterator should have a unique \"key\" prop;\n  //                this is a requirement because of the Array construct we used to\n  //                'loop' the checkers.)\n  constructor(props) {\n    super(props);\n    // Reference to the DOM node:\n    this.node = null;\n    // Reference to the animation:\n    this.tween = null;\n  }\n\n  componentDidMount() {\n    let cy = this.props.rowID * 100;\n    if (this.props.rowID === 0)\n      cy = cy.toString();\n    else\n      cy = (cy + 8).toString();\n    let duration = (this.props.rowID * 0.055 + 0.35).toString();\n    // Use the node ref to create the animation:\n    this.tween = TweenMax.to(this.node,\n                                duration,\n                                //{x: '0', y: '0'}, // 'from' position\n                                {x: '0', y: cy,    // 'to' position\n                                ease: 'easeOutBounce'});\n  }\n\n  render() {\n    let className = this.props.color;\n\n    if (this.props.winningChecker) {\n      className += ' winningChecker';\n    }\n\n    return <circle\n              r ='42.5'\n              cx='50'\n              cy='42.5'\n              className={className}\n              fill={'url(#' + this.props.color + ')'}\n              ref={circle => this.node = circle}\n            />;\n  }\n}\n\n\nexport default Checker;","import React from 'react';\nimport Checker from './checker';\nimport './column.scss';\n\n\nclass Column extends React.Component {\n  // PROPS: (- key)\n  //        - colID\n  //        - rows\n  //        - colData\n  //        - fullColumn\n  //        - gameOver\n  //        - p1Next\n  //        - p1Color\n  //        - p2Color\n  //        - onColumnClick: onClick-handler that executes within the App\n  //          component's context, and returns colData when necessary.\n  constructor(props) {\n    super(props);\n    this.state = {\n      isHovered: false,\n    };\n  }\n\n  // ES6 Arrow functions are a more concise syntax for writing JavaScript\n  // functions; we avoid having to type the 'function' and 'return' keyword.\n  // On top of that, arrow functions are anonymous and change the way\n  // 'this' binds in functions; this is why we don't need\n  // 'this.mouseEnter = this.mouseEnter.bind(this);' in the constructor.\n  mouseEnter = () => {\n    this.setState({ isHovered: true });\n  }\n  mouseLeave = () => {\n    this.setState({ isHovered: false });\n  }\n\n  handleClick = () => {\n    // Guard against changing colData after gameOver or fullColumn:\n    if (this.props.fullColumn || this.props.gameOver)\n      return;\n    let updateGridState = this.props.onColumnClick;\n    updateGridState(this.props.colID);\n\n    this.mouseLeave();\n  }\n\n  render() {\n    let id = 'column' + this.props.colID;\n    let x = (98 * this.props.colID).toString();\n    let color = this.props.p1Next ? this.props.p1Color : this.props.p2Color;\n\n    let className = 'colNoFocus';\n    let hoverChecker = false;\n    if (this.state.isHovered && !this.props.fullColumn && !this.props.gameOver) {\n      // In these conditions, enable a column to be focussed on,\n      // and hovered over with a checker.\n      className = 'colInFocus';\n      hoverChecker = true;\n    }\n\n    return (\n      <React.Fragment>\n        <svg x={x} y='0'\n              id={id}\n              className={className}\n              onMouseEnter={this.mouseEnter}\n              onMouseLeave={this.mouseLeave}\n              onClick={this.handleClick}>\n          {/* Any checkers in the column should come at the start of the svg,\n              so they're effectively BEHIND the column! So checkers go here: */}\n          {\n            hoverChecker ? // Hover checker in invisible top row:\n                <Checker color={color} rowID={0} /> : null\n          }\n\n          {\n            this.props.colData.map((checker, i) => {\n              // Each checker string is of the form: 'p1:color', 'p2:color', 'w1:color' or 'w2:color'\n              if (checker) {\n                  let color = checker.slice(3);\n                  let winningChecker = false;\n                  if (checker[0] === 'w') winningChecker = true;\n                  return <Checker\n                            key={i}\n                            // Invert rowID order because svg orders top down\n                            // and the colData array is ordered bottom up!\n                            rowID={Math.abs(i - this.props.rows)}\n                            color={color}\n                            winningChecker={winningChecker}\n                          />;\n              }\n              return null;\n            })\n          }\n          {/* Invisible top cell: */}\n          <rect x='0' y='0' width='100' height='100' fill='none' />\n          {/* Actual visible column: */}\n          <rect x='0'\n                y='92' // This is changed to make the space above the top cell in the grid bigger;\n                       // However, this complicates things in both grid and checker!\n                width='100'\n                height={(this.props.rows * 100 + 16).toString()}\n                fill='url(#blackGreyBlack)'\n                mask='url(#cell-mask)' />\n        </svg>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default Column;","import React from 'react';\nimport Column from './column';\nimport './game.scss';\n\n\nfunction Game(props) {\n  // This may seem like a nasty wall of code, but it is entirely\n  // inline-svg; it does nothing than set the visuals of the grid\n  // and its checkers. The magic happens in its <Column/> child\n  // components, and its parent component, <App/>.\n\n  // Standard Medium Gridsize: props.rows = 6\n  let cols = props.rows + 1; // 7\n\n  let pillarCorrection = (props.rows - 6) * 2; // 0\n  let width = cols * 100; // 700\n  let height = cols * 100 + 8; // 708\n  let viewbox = '0 0 ' + (width + 100) + ' ' + (height + 80); // '0 0 800 788'\n  let bottomPaddingWidth = width - (props.rows * 2); // 688\n  let bottomPaddingY = height + 7; // 715\n  let pillarHeight = width - 20; // 680\n  let rightPillarX = width + 36 - pillarCorrection; // 736\n\n  let gridFocus = '';\n  if (props.gameOver) gridFocus = 'gridNoFocus';\n\n  return (\n    <div id='game'>\n      <div id='grid'>\n        <svg id='svg-container' viewBox={viewbox} xmlns='http://www.w3.org/2000/svg'>\n          {/* This is the container svg, which holds the left and right 'pillars', the bottom padding,\n              and an extra invisible top row, which will show the checkers that are about to drop,\n              when hovering. Turn on the $LSD bool in 'src/app/app.scss' to visualise this. */}\n          <defs>\n            {/* Gradients to make checkers look all fancy */}\n            <radialGradient id='yellow' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\n              <stop offset='63%' stopColor='rgb(251, 255, 0)' stopOpacity='0.9' />\n              <stop offset='100%' stopColor='rgb(255, 174, 0)' stopOpacity='1' />\n            </radialGradient>\n            <radialGradient id='orange' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\n                <stop offset='65%' stopColor='rgb(253, 156, 0)' stopOpacity='0.65' />\n                <stop offset='100%' stopColor='rgb(253, 101, 0)' stopOpacity='0.95' />\n            </radialGradient>\n            <radialGradient id='red' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\n                <stop offset='60%' stopColor='rgb(246, 75, 7)' stopOpacity='0.8' />\n                <stop offset='100%' stopColor='rgb(209, 0, 7)' stopOpacity='1' />\n            </radialGradient>\n            <radialGradient id='green' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\n                <stop offset='65%' stopColor='rgb(134, 246, 7)' stopOpacity='0.8' />\n                <stop offset='100%' stopColor='rgb(21, 139, 0)' stopOpacity='1' />\n            </radialGradient>\n            <radialGradient id='cyan' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\n                <stop offset='65%' stopColor='rgb(66, 255, 182)' stopOpacity='1' />\n                <stop offset='100%' stopColor='rgb(15, 119, 145)' stopOpacity='1' />\n            </radialGradient>\n            <radialGradient id='blue' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\n                <stop offset='60%' stopColor='rgb(7, 210, 246)' stopOpacity='0.8' />\n                <stop offset='100%' stopColor='rgb(0, 79, 251)' stopOpacity='1' />\n            </radialGradient>\n            <radialGradient id='purple' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\n                <stop offset='60%' stopColor='rgb(255, 84, 190)' stopOpacity='0.8' />\n                <stop offset='100%' stopColor='rgb(159, 0, 251)' stopOpacity='1' />\n            </radialGradient>\n\n            {/* Gradients to make board look more realistic */}\n            <linearGradient id='blackBottom' x1='0' y1='0' x2='0' y2='1'>\n                <stop offset='30%' stopColor='rgb(10, 10, 10)' stopOpacity='0.8' />\n                <stop offset='50%' stopColor='rgb(0, 0, 0)' stopOpacity='0.9' />\n                <stop offset='85%' stopColor='rgb(54, 51, 51)' stopOpacity='1' /> \n            </linearGradient>\n            <linearGradient id='blackPillars' x1='0' y1='0' x2='1' y2='0'>\n                <stop offset='0%' stopColor='rgb(0, 0, 0)' stopOpacity='1' />\n                <stop offset='20%' stopColor='rgb(25, 25, 25)' stopOpacity='1' />\n                <stop offset='35%' stopColor='rgb(40, 40, 40)' stopOpacity='1' />\n                <stop offset='50%' stopColor='rgb(60, 60, 60)' stopOpacity='1' />\n                <stop offset='65%' stopColor='rgb(40, 40, 40)' stopOpacity='1' />\n                <stop offset='80%' stopColor='rgb(25, 25, 25)' stopOpacity='1' />\n                <stop offset='100%' stopColor='rgb(0, 0, 0)' stopOpacity='1' />\n            </linearGradient>\n            <linearGradient id='blackGreyBlack' x1='0' y1='0' x2='1' y2='0'>\n                <stop offset='0%' stopColor='rgb(0, 0, 0)' stopOpacity='1' />\n                <stop offset='12%' stopColor='rgb(25, 25, 25)' stopOpacity='0.95' />\n                <stop offset='35%' stopColor='rgb(25, 25, 25)' stopOpacity='0.9' />\n                <stop offset='50%' stopColor='rgb(30, 30, 30)' stopOpacity='0.85' />\n                <stop offset='65%' stopColor='rgb(25, 25, 25)' stopOpacity='0.9' />\n                <stop offset='88%' stopColor='rgb(25, 25, 25)' stopOpacity='0.95' />\n                <stop offset='100%' stopColor='rgb(0, 0, 0)' stopOpacity='1' />\n            </linearGradient>\n\n            {/* pattern and mask to punch the holes in the grid */}\n            <pattern id='hole' patternUnits='userSpaceOnUse' width='100' height='100'>\n              {/* The <pattern> matches the size of a cell, 100x100, and contains a <circle>,\n                  representing the hole, that matches the size of the checker.\n                  The <circle> gets a fill color of 'black'; in the context of a <mask>, this\n                  means the absence of space, or full transparency, as opposed to literal black. */}\n              <circle cx='50' cy='50' r='42' fill='black'></circle>\n            </pattern>\n            <mask id='cell-mask'>\n              {/* The <mask> is composed of two <rect> elements that match the grid column size;\n                  the first gets a fill color of 'white' (opposite of 'black' in a mask) to represent\n                  the part of the column we want to be opaque/visible.\n                  The second <rect> sits on top of the first and has a fill of url(#hole) which refers\n                  to the pattern we created above. */}\n              <rect width='100' height={height} fill='white'></rect>\n              <rect width='100' height={height} fill='url(#hole)'></rect>\n              {/* Now, we can set the mask attribute for our grid column <rect>, by referencing\n                  the <mask> element by id: 'url(#cell-mask)'. A nice feature of the <pattern> element\n                  is that it repeats itself, based on the height/width attributes we've provided.\n                  This means we can reveal the 6 rows of a single column without adding each\n                  circular hole to the DOM explicitly. To build multiple columns, we simply add\n                  a nested <svg> element at the correct x position to wrap each masked <rect>! */}\n            </mask>\n\n            {/* Filter for generating red svg tags for LSD */}\n            <filter id='redtags' x='-0.25' y='-0.25' width='1.5' height='1.6'>\n              <feFlood floodColor='red'/>\n              <feComposite in='SourceGraphic'/>\n            </filter>\n          </defs>\n\n          <svg id='svg-grid' className={gridFocus} width={width} height={height} x='54' y='8' xmlns='http://www.w3.org/2000/svg'>\n            {/* This is the actual grid svg consisting of 7 column svg's;\n                each column is 700px high by 100px wide, with the top cell an invisible one,\n                to show pending checkers. */}\n            {\n              // Since regular looping is not available inside JSX code,\n              // we use an array construct to 'loop' to create\n              // the columns of the grid!\n              [...Array(cols)].map((el, i) => {\n                return <Column\n                          key={i}\n                          colID={i}\n                          rows={props.rows}\n                          colData={props.grid[i]}\n                          fullColumn={props.fullColumns[i]}\n                          gameOver={props.gameOver}\n                          p1Next={props.p1Next}\n                          p1Color={props.p1Color}\n                          p2Color={props.p2Color}\n                          onColumnClick={props.onColumnClick}\n                       />;\n              })\n            }\n          </svg>\n\n          <g className={gridFocus}>\n            <rect id='bottom-padding' width={bottomPaddingWidth} height='20' x='54' y={bottomPaddingY} fill='url(#blackBottom)' />\n            <rect id='left-pillar' width='60' height={pillarHeight} fill='url(#blackPillars)' x='0' y='100' rx='10' ry='10' />\n            <rect id='right-pillar' width='60' height={pillarHeight} fill='url(#blackPillars)' x={rightPillarX} y='100' rx='10' ry='10' />\n            \n            {/* Svg tags for LSD; only visible when '$LSD: true;' in 'src/app/app.scss' */}\n            <text className='svg-tags' filter='url(#redtags)' x='22' y='15' fontSize='0.9rem' fill='white'>#svg-container</text>\n            <text className='svg-tags' filter='url(#redtags)' x='73' y='89' fontSize='0.9rem' fill='white'>#svg-grid</text>\n            <text className='svg-tags' filter='url(#redtags)' x='250' y='50' fontSize='0.9rem' fill='white'>Invisible top row for checkers about to drop</text>\n          </g>\n        </svg>\n      </div>\n\n      <div id='buttons'>\n        {/* Reset button; the 'value={props.rows}' is necessary because it is the argument to\n        the 'resetGrid' event handler */}\n        {/*\n          <button type=\"button\" value={props.rows} onClick={props.resetGrid}>Start</button>\n        */}\n          <button type=\"button\" value={props.rows} onClick={props.resetGrid}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\n\nexport default Game;","import React from 'react';\n\nimport './app.scss';\nimport vars from './_variables.scss';\n\nimport Status from './status/status';\nimport Settings from './settings/settings';\nimport Game from './game/game';\n\n/**\n * The <App/> component functions as a container component for the\n * <Status/>, <Settings/> and <Game/> presenter components.\n */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // number of rows of the grid; cols = rows + 1\n      rows: 6,\n      grid: [],\n      fullColumns: [],\n      p1Next: true,\n      p1Color: 'red',\n      p2Color: 'yellow',\n      winner: null,\n      gameOver: false,\n      timer: 0,\n      // Settings/Sidebar state:\n      portraitActive: false, // Sidebar is active in portrait orientation (inactive by default in portrait)\n      landscapePassive: false, // Sidebar is inactive in landscape orientation (active by default in landscape)\n      clientX: null, // don't need to be in state!?\n      clientY: null, // should be: this.clientX and this.clientY\n    };\n\n    this.initGrid(this.state.rows);\n  }\n\n  /**\n   * `initGrid` initialises the 'grid' and 'fullColumns' data structures:\n   * - 'grid' keeps track of which grid cells contain checkers of which player/color\n   *   NOTE:\n   *   'grid' = array of COLUMN arrays!\n   *   (NOT row arrays, which seems more intuitive at first sight)\n   *   (COLUMN subarrays are algorithmically simpler when dropping checkers)\n   * - 'fullColumns' keeps track of which grid columns are full:\n   *   each entry corresponds to the equivalent column subarray in 'grid'\n   */\n  initGrid(rows) {\n    let grid = [];\n    let fullColumns = [];\n    let cols = rows + 1;\n    for (let c = 0; c < cols; c++) {\n      fullColumns.push(false);\n      let column = [];\n      for (let r = 0; r < rows; r++) {\n        column.push(null);\n      }\n      grid.push(column);\n    }\n\n    // If 'this.state.grid' is already initialised (i.e. non-empty),\n    // the call is NOT from inside the constructor, so we use 'setState',\n    // and also reset state associated with game-over:\n    if (this.state.grid.length !== 0) {\n      this.setState({\n        rows,\n        grid,\n        fullColumns,\n        winner: null,\n        gameOver: false,\n        p1Next: true,\n      });\n    } else {\n      // If the grid is empty, this call came from inside the constructor,\n      // so we need to set state directly, instead of using 'setState'.\n      // We only need to initialise the 'grid' and 'fullColumns' arrays\n      // in this case, and we can safely silence the\n      // \"Do not mutate state directly, Use setState()\" warning:\n      // eslint-disable-next-line react/no-direct-mutation-state\n      this.state = {\n        ...this.state,\n        grid,\n        fullColumns,\n      }\n    }\n  }\n\n  /**\n   * This method is called on every click on a column, to modify the grid data\n   * structure and related state. It needs to be passed to <Column/> through\n   * props, where it will receive its 'colID' argument (the ID of the\n   * Column its executing in). It then executes within the <App/>\n   * component's context (since this is an ES6 arrow function), and\n   * sets the bottom cell of the grid data structure to the relevant\n   * color. Finally, it checks if this change results in a winner\n   * or a 'fullColumn'.\n   */\n  updateGridState = (colID) => {\n    let bottomCell = this.findBottomCell(colID);\n\n    const grid = this.state.grid.slice();\n    grid[colID][bottomCell] = this.state.p1Next ? 'p1:' + this.state.p1Color : 'p2:' + this.state.p2Color;\n\n    let winner = this.checkForWinner(grid);\n    let gameOver = (winner !== null);\n\n    // If there is not bottom empty cell AFTER grid update, that column is full:\n    bottomCell = this.findBottomCell(colID);\n    const fullColumns = this.state.fullColumns.slice();\n    if (bottomCell === null) fullColumns[colID] = true;\n    if (!fullColumns.includes(false)) gameOver = true;\n\n    this.setState({\n      grid,\n      fullColumns,\n      winner,\n      gameOver,\n      p1Next: !this.state.p1Next,\n    });\n  }\n\n  /**\n   * Finds the bottom empty cell in a column, where the checker should drop to.\n   * @param {array} col - State of a column; bottom of the column = START of the array!\n   */\n  findBottomCell(col) {\n    for (let r = 0; r < this.state.rows; r++) {\n      if (this.state.grid[col][r] === null) {\n        return r;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * The idea of this function is to basically limit the checks to those that make sense.\n   * For example, when checking cells bottom to top (see the first loop),\n   * you only need to check the bottom 3 rows (r = 0, 1, 2) in each column (c = 0, 1, 2, 3, 4, 5, 6).\n   * That's because starting higher would run off the top of the board\n   * before finding a possible win. In other words, row sets {0,1,2,3}, {1,2,3,4} and {2,3,4,5}\n   * would be valid but {3,4,5,6} would not, because the six valid rows are 0-5.\n   * @param {array} grid - State of the grid, as an array of COLUMN arrays!\n   */\n  checkForWinner(grid) {\n    let cols = this.state.rows + 1;\n\n    // Check bottom to top\n    for (let c = 0; c < cols; c++) {\n      for (let r = 0; r < this.state.rows - 3; r++) {\n        if (grid[c][r] === null)\n          // if the bottom of the column is empty, continue with next column ...\n          break;\n        if (this.checkLine(grid[c][r], grid[c][r+1], grid[c][r+2], grid[c][r+3])) {\n          let winColor = grid[c][r].slice(3);\n          // Mark winning checkers with 'w' instead of 'p':\n          grid[c][r] = 'w' + grid[c][r].slice(1);\n          grid[c][r+1] = 'w' + grid[c][r+1].slice(1);\n          grid[c][r+2] = 'w' + grid[c][r+2].slice(1);\n          grid[c][r+3] = 'w' + grid[c][r+3].slice(1);\n          this.setState({ grid });\n          return winColor;\n        }\n      }\n    }\n\n    // Check left to right\n    for (let c = 0; c < cols - 3; c++) {\n      for (let r = 0; r < this.state.rows; r++) {\n        if (grid[c][r] === null)\n          // if the left of the row is empty, continue with next column ...\n          break;\n        if (this.checkLine(grid[c][r], grid[c+1][r], grid[c+2][r], grid[c+3][r])) {\n          let winColor = grid[c][r].slice(3);\n          // Mark winning checkers with 'w' instead of 'p':\n          grid[c][r] = 'w' + grid[c][r].slice(1);\n          grid[c+1][r] = 'w' + grid[c+1][r].slice(1);\n          grid[c+2][r] = 'w' + grid[c+2][r].slice(1);\n          grid[c+3][r] = 'w' + grid[c+3][r].slice(1);\n          this.setState({ grid });\n          return winColor;\n        }\n      }\n    }\n\n    // Check down-left to top-right\n    for (let c = 0; c < cols - 3; c++) {\n      for (let r = 0; r < this.state.rows - 3; r++) {\n        if (grid[c][r] === null)\n          // if the left of the line is empty, continue with next column ...\n          break;\n        if (this.checkLine(grid[c][r], grid[c+1][r+1], grid[c+2][r+2], grid[c+3][r+3])) {\n          let winColor = grid[c][r].slice(3);\n          // Mark winning checkers with 'w' instead of 'p':\n          grid[c][r] = 'w' + grid[c][r].slice(1);\n          grid[c+1][r+1] = 'w' + grid[c+1][r+1].slice(1);\n          grid[c+2][r+2] = 'w' + grid[c+2][r+2].slice(1);\n          grid[c+3][r+3] = 'w' + grid[c+3][r+3].slice(1);\n          this.setState({ grid });\n          return winColor;\n        }\n      }\n    }\n  \n    // Check down-right to top-left\n    for (let c = cols - 1; c >= 3; c--) {\n      for (let r = 0; r < this.state.rows - 3; r++) {\n        if (grid[c][r] === null)\n          // if the right of the line is empty, continue with next column on the left ...\n          break;\n        if (this.checkLine(grid[c][r], grid[c-1][r+1], grid[c-2][r+2], grid[c-3][r+3])) {\n          let winColor = grid[c][r].slice(3);\n          // Mark winning checkers with 'w' instead of 'p':\n          grid[c][r] = 'w' + grid[c][r].slice(1);\n          grid[c-1][r+1] = 'w' + grid[c-1][r+1].slice(1);\n          grid[c-2][r+2] = 'w' + grid[c-2][r+2].slice(1);\n          grid[c-3][r+3] = 'w' + grid[c-3][r+3].slice(1);\n          this.setState({ grid });\n          return winColor;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if all cells have a checker from the same player\n   * @param {null or string} a, b, c, d - Checkers in the grid\n   * Each checker string is of the form: 'p1:color' or 'p2:color'\n   */\n  checkLine(a, b, c, d) {\n    // Check if all cells are non-empty:\n    if (a && b && c && d) {\n      // check if all checkers are from same player:\n      // the second letter (index [1]) in a checker string indicates the player\n      return ((a[1] === b[1]) && (a[1] === c[1]) && (a[1] === d[1]));\n    }\n    return false;\n  }\n\n  //////////////////////////////////\n  //       Sidebar Methods:       //\n  //////////////////////////////////\n  handleTouchStart = (event) => {\n    // 'touches' returns a list of all the touch objects\n    // that are currently in contact with the surface;\n    // touches[0] indicates that it will only show the\n    // coordinates of one finger (the first).\n    let clientX = event.touches[0].clientX;\n    let clientY = event.touches[0].clientY;\n    this.setState({ clientX, clientY });\n  }\n\n  handleTouchMove = (event) => {\n    // 'clientX' returns the X coordinate of the touch point\n    // relative to the left edge of the browser viewport,\n    // not including any scroll offset.\n    let clientX = this.state.clientX;\n    // 'clientY' returns the Y coordinate of the touch point\n    // relative to the top edge of the browser viewport,\n    // not including any scroll offset.\n    let clientY = this.state.clientY;\n\n    if ( !clientX || !clientY ) {\n        return;\n    }\n\n    if ( Math.abs(clientX) > ((25/100) * (window.screen.width)) ) {\n      if ( !this.state.portraitActive ) {\n        return;\n      }\n    }\n\n    let xDelta = event.touches[0].clientX - clientX;\n    let yDelta = event.touches[0].clientY - clientY;\n\n    if ( Math.abs(xDelta) > Math.abs(yDelta) ) {\n      // if xDelta > 0: right swipe\n      if (xDelta > 0) {\n        if ( window.matchMedia(\"(orientation: landscape)\").matches && window.innerWidth > vars.mediaQueryWidth) {\n          this.setState({ landscapePassive: true });\n        } else {\n          this.setState({ portraitActive: true });\n        }\n      } else {\n        // if xDelta < 0: left swipe\n        if ( window.matchMedia(\"(orientation: landscape)\").matches && window.innerWidth > vars.mediaQueryWidth) {\n          this.setState({ landscapePassive: false });\n        } else {\n          this.setState({ portraitActive: false });\n        }\n      }\n    }\n\n    clientX = null;\n    clientY = null;\n    this.setState({ clientX, clientY });\n\n    //event.preventDefault();\n  }\n\n  toggleLandscape = () => {\n    this.setState({ landscapePassive: !this.state.landscapePassive });\n  }\n\n  togglePortrait = () => {\n    this.setState({ portraitActive: !this.state.portraitActive });\n  }\n\n  // Clicking the Settings icon should activate the sidebar:\n  handleClick = () => {\n    if ( window.matchMedia(\"(orientation: landscape)\").matches && window.innerWidth > vars.mediaQueryWidth) {\n      this.toggleLandscape();\n    } else {\n      this.togglePortrait();\n    }\n  }\n\n  // Clicking the small strip of sidebar should also activate sidebar:\n  handleSideClick = () => {\n    if ( window.matchMedia(\"(orientation: landscape)\").matches && window.innerWidth > vars.mediaQueryWidth) {\n      // Clicking the sidestrip should only work when the sidebar is NOT active:\n      if (this.state.landscapePassive) {\n        this.toggleLandscape();\n      }\n    } else {\n      if (!this.state.portraitActive) {\n        this.togglePortrait();\n      }\n    }\n  }\n  /////////// END Sidebar Methods ///////////////////////////////////////////////////////\n\n  /**\n   * This method should be passed to the Gridsize component inside the Settings component;\n   * it takes the number of rows as input to determine the Gridsize and set the app state.\n   */\n  resetGrid = (event) => {\n    let rows = parseInt(event.target.value);\n    this.initGrid(rows);\n  }\n\n  /**\n   * To pass parameters to event handlers while using property initializer syntax, we need to use currying;\n   * Passing two parameters to the same function like 'setCheckerColor = (player, event) => {}' would not work,\n   * because the onClick event invokes the callback by passing an event object as first and only parameter.\n   * Hence if we use '= (player, event) => {}' then the event would be passed in the 'player' parameter and the\n   * 'event' parameter would be undefined. By using currying, we are creating a closure which is equivalent to:\n   *\n   * ```javascript\n   * setCheckerColor = (player) => {\n   *   return (event) => {\n   *     ...\n   *   }\n   * }\n   * ```\n   *\n   * This method should be passed to the CheckerColor component inside the Settings component;\n   * it takes the checker color as input and sets it in app state.\n   */\n  setCheckerColor = (player) => (event) => {\n    let color = event.target.value;\n    if (player === 'Player 1:')\n      this.setState({p1Color: color});\n    else\n      this.setState({p2Color: color});\n  }\n\n  setTimer = (event) => {\n    let timer = parseInt(event.target.value);\n    this.setState({timer});\n  }\n\n  changeTurn = () => {\n    this.setState({p1Next: !this.state.p1Next});\n  }\n\n  render() {\n    return (\n      <div id='app'\n            onTouchStart={this.handleTouchStart}\n            onTouchMove={this.handleTouchMove} >\n        {/* 'app' is a css grid containing the <Settings/>, <Status/> and <Game/> components */}\n\n        <Settings\n            landscapePassive={this.state.landscapePassive}\n            portraitActive={this.state.portraitActive}\n            onClick={this.handleClick}\n            onSideClick={this.handleSideClick}\n\n            rows={this.state.rows}\n            resetGrid={this.resetGrid}\n            p1Color={this.state.p1Color}\n            p2Color={this.state.p2Color}\n            setCheckerColor={this.setCheckerColor}\n            timer={this.state.timer}\n            setTimer={this.setTimer}\n        />\n\n        <Status\n            winner={this.state.winner}\n            gameOver={this.state.gameOver}\n            p1Next={this.state.p1Next}\n            p1Color={this.state.p1Color}\n            p2Color={this.state.p2Color}\n            changeTurn={this.changeTurn}\n            timer={this.state.timer}\n        />\n\n        <Game\n            rows={this.state.rows}\n            grid={this.state.grid}\n            fullColumns={this.state.fullColumns}\n            gameOver={this.state.gameOver}\n            p1Next={this.state.p1Next}\n            p1Color={this.state.p1Color}\n            p2Color={this.state.p2Color}\n            onColumnClick={this.updateGridState}\n            resetGrid={this.resetGrid}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './app/app';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}